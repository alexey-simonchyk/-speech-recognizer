package com.bsuir.speech_recognizer.hmm;

import com.bsuir.speech_recognizer.math.MathCommon;
import com.bsuir.speech_recognizer.mfcc.MfccValue;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class SoundMap {

    public SoundMap() {
        double[][] tempA = {
                {-9.61145849454065, 2.065478546559786, -6.493394162016605, 1.4672122391639109, -4.885032769242864, 1.9149919962102238, -3.517612882519476, 1.2292389806714055, -2.4851491336924, -0.026598717251642423, -1.1610478278362728, -2.436867244966034E-16},
                {-9.658174298833412, 2.1275111196653387, -5.6062923541899385, 2.1252997630257635, -5.133589171129715, 0.7346853340401158, -3.8000899728414796, 0.7668456324369024, -1.8426863403855476, 0.4803643465519736, -1.0911515724148737, 6.382412042722881E-16},
                {-9.4191486109862, 1.8600115326979512, -6.099247940422453, 1.5049006812708772, -5.2205118212558865, 1.0149445275214926, -3.662163808923101, 1.9564563586758414, -1.663515911592333, 0.7539863557178695, -0.2682547746277518, 1.6777405736297867E-15},
                {-7.966817628249878, 2.2196103491791046, -6.435552700374126, 1.7170831196347356, -4.6925231722619944, 0.29047494375355987, -4.1994584631131575, -0.13488328136826522, -2.7683825690701465, -0.12473397442912904, -0.6198271224310854, 7.805335989013262E-16},
                {-9.056590360803998, 1.5143670027464884, -5.69819850955939, 0.9349691991416789, -4.670660230163119, 1.192430888995848, -3.8153010693273997, 0.206084973889183, -2.580182074589382, 0.7399907153878361, -0.7692953906335434, 1.0265368360268718E-15}
        };
        SoundMapEntry soundMapEntryA = new SoundMapEntry();
        ArrayList<MfccValue> mfccValuesA = soundMapEntryA.getValues();
        for (double[] temp : tempA) {
            mfccValuesA.add(new MfccValue(temp));
        }
        values.put("a", soundMapEntryA);



        double[][] tempD = {
                {-10.805354671367287, 1.578911150335499, -5.508135641678667, 1.8167607411598294, -4.553766134367173, 1.2492551728885135, -3.138623934501643, 1.3794467735964322, -1.9719896593133468, 0.7703722775328611, 0.15054464128429262, 8.924772299708646E-16},
                {-10.504818417467948, 1.835912574153605, -5.857774389374157, 2.244901112495556, -4.471244703709032, 1.1195419841718337, -3.7997164907678695, 1.7779103611786977, -1.6777826144117982, 0.993165727270622, -0.2828517382568662, 5.237554521029204E-16},
                {-10.326792412866766, 1.9501883648826261, -4.586205376263246, 2.410043620216929, -4.404105509319872, 0.8891677922575187, -4.040366885835053, 0.1708650270845964, -2.6188910817666047, 0.7391900866780995, -0.6942417986723668, 2.3703099434143135E-16},
                {-10.445747944950371, 2.3028162947226534, -5.155311501447905, 1.4865604689289107, -4.654583855223258, 1.7422900958746501, -3.038118041542911, 0.5779179850396912, -1.7942922823439111, 0.00394119300499618, -1.4358658818851833, -9.47164593876545E-16},
                {-10.428095196221607, 2.502496988299925, -4.966009906115938, 1.4583598100733663, -5.1082287679465574, 0.5247940502545689, -3.7094778407929736, 1.1744247195440338, -2.39959176875652, 0.5601091309890784, -0.45766998369292133, 5.322370425080058E-16}
        };
        SoundMapEntry soundMapEntryD = new SoundMapEntry();
        ArrayList<MfccValue> mfccValuesD = soundMapEntryD.getValues();
        for (double[] temp : tempD) {
            mfccValuesD.add(new MfccValue(temp));
        }
        values.put("d", soundMapEntryD);




        double[][] tempV = {
                {-10.222152214930727, 1.8653178361406693, -6.257264893348356, 1.892841323627115, -3.7977151028533287, 1.470515448228885, -3.1085655475988583, 1.0010491883193724, -2.3827868439444293, -0.11828921326361463, -0.7690235419620435, -7.878444446437966E-16},
                {-10.3171303329476, 2.197760421323427, -5.889829298744959, 1.5007679210936429, -4.428299630987402, 0.993350533173607, -3.179811195733215, 1.4550919709909067, -1.791858439425611, 0.5330432492006041, -0.7499334521944041, -3.389360530579732E-16},
                {-10.213894561098416, 1.075473238753224, -4.892963899467505, 1.8793711117006553, -5.0485285069319765, 1.5016825498160418, -3.5922764525674444, 1.3047787359791292, -2.1537501951887257, 0.4324468478632141, -0.6634669316055397, 2.704684397041354E-15}
        };
        SoundMapEntry soundMapEntryV = new SoundMapEntry();
        ArrayList<MfccValue> mfccValuesV = soundMapEntryV.getValues();
        for (double[] temp : tempV) {
            mfccValuesV.add(new MfccValue(temp));
        }
        values.put("v", soundMapEntryV);
    }

    private static final double MFCC_WEIGHTS[] = {0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0};

    private HashMap<String, SoundMapEntry> values = new HashMap<>(0);

    public HashMap<String, SoundMapEntry> getValues() {
        return values;
    }

    public void setValues(HashMap<String, SoundMapEntry> values) {
        this.values = values;
    }

    public String getValue(MfccValue mfccValue) {
        double minDistance = Double.MAX_VALUE;
        String soundValue = null;

        for (Map.Entry<String, SoundMapEntry> entry : values.entrySet()) {
            SoundMapEntry soundMapEntry = entry.getValue();
            for (MfccValue value : soundMapEntry.getValues()) {

                double distance;
                distance = MathCommon.euclidianDistanceWithWeight(value.getValue(), mfccValue.getValue(), MFCC_WEIGHTS);

                if (distance < minDistance) {
                    soundValue = entry.getKey();
                    minDistance = distance;
                }
            }
        }

        return soundValue;
    }
}
