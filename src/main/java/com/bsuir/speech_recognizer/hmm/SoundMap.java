package com.bsuir.speech_recognizer.hmm;

import com.bsuir.speech_recognizer.math.MathCommon;
import com.bsuir.speech_recognizer.mfcc.MfccValue;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class SoundMap {

    public SoundMap() {
        double[][] tempA = {
                {63.35759751779932, -10.695079356302331, 1.018620297788817, -0.6656964553682463, -0.19098532752336528, -0.980469164110223, -0.28274549113327563, -0.5877363952527483, -0.6665681795677099, -0.03608612881416029, 0.31147608055988485, -0.299693322238189, 0.33804691258438835, 0.6829051871665603, 0.38503740234661343, 0.6962761454090858, 0.5192953479637192, -0.2974857100682695, 0.08596428832253633, 0.27001750733066604},
                {63.215022666342286, -11.626094717948405, 1.0306186875157248, -0.6027358347695051, -0.34618811873949706, 0.3720221523868208, 0.7920808163729856, 0.5090100510805544, 0.22102033475080507, -0.134560169157528, -0.42676915779248015, 0.11905751912170626, -0.656661605305056, -0.3112221395384407, -0.06051655686242796, 0.34205135280479126, 0.33586898120376407, -0.22168008081263846, 0.30527538089749306, -0.2675383461982833},
                {62.55078954579232, -10.912407264652721, 1.1868636753222068, -0.6794763452927817, -0.511451791025423, -0.2719550673078439, 0.14645272032129553, -0.38238573432769485, -0.46771995986864523, -0.252524368593841, -1.0046209945019804, -1.1473332809108299, -0.5087845836870564, 0.11130276933448613, -0.013620709131972442, 0.11747783174878657, -0.050505642998323275, -0.1025047702063775, 0.2701460212903738, 0.6064550661302197},
                {63.71497676152826, -9.342289623834702, 2.8446494657090087, 0.3782360799871869, -0.15602072623082197, -0.09269164940106434, 0.16950009093759677, 1.350124519912331, 0.9014415248651955, 0.24633692978821387, 0.5971951111640275, 0.3814211435813655, 0.7115581874796604, 0.6153343741038722, 0.8506385412485638, 0.44899462490148867, 0.1579315686910776, 0.16513927775425685, 0.01420288637102729, -0.012507565339195004},
                {64.47816359619505, -9.3776546115015, 1.0483150029448152, -1.0694176980891084, 0.33339804783385407, -0.07646281716761916, -0.16021037781782566, -0.5531440713169071, 0.36246129327603516, 0.3616384114469864, 0.5352958249510951, 0.6680857271152236, 0.20959007790527817, -0.01964792151214434, 0.11519048687078204, -0.12085364341534577, 0.45495152867417876, 0.6019909960745748, 0.41281064435596315, -0.03232667563952418}
        };
        SoundMapEntry soundMapEntryA = new SoundMapEntry();
        ArrayList<MfccValue> mfccValuesA = soundMapEntryA.getValues();
        for (double[] temp : tempA) {
            mfccValuesA.add(new MfccValue(temp));
        }
        values.put("a", soundMapEntryA);



        double[][] tempD = {
                {62.82369830665407, -11.753898834228117, -0.8163267265364009, -1.946771990872803, 0.08235460130720718, -0.7756688517644692, -3.5047838631818706E-4, -0.2956863788215869, -0.1766496826558721, -0.8673568632912758, -0.29679171127640114, -0.1951210289302998, -0.030145457914159568, 0.39385946697874985, 0.471944471494282, -0.16537305987911433, 0.3018821665212921, 0.3939665721424459, 0.8046405636113546, 0.7686171032623766},
                {61.44265947479604, -11.916561615385827, -0.3083807412310309, -1.459476855136188, -0.4783709439661141, -1.2000817455863073, 0.5163785597133588, -0.1997505840098346, 0.2119637808185355, 0.15602006838615923, -0.8732667578223077, -0.826355744810586, -0.5477867620611199, -0.05517784997144748, -0.23033653124410147, -0.4727113555408493, -0.6072172422016242, -0.08947921649581292, -0.3717491865889997, 0.08290439383921733},
                {61.18416729920578, -11.645890142876077, -0.3294718449733649, -1.484745653195478, 0.4173188037750686, 0.5388701074741569, 1.309396306955528, 0.7852297595049098, 0.9941349641796537, 0.626019980839926, 0.43766131731228697, 0.5418018813197558, 0.2834593167988708, -0.058272755284959565, -0.4337860976020598, -0.36207152116152375, 0.022252986141870768, -0.4426970815648197, -0.18725027256921722, -0.20245537240242034},
                {61.47942607160223, -12.550780706146309, -0.08123754235279534, -1.055230507495414, 0.3639463642962353, 0.1801454002182714, -0.36964109874238193, -0.41389783872423846, -0.5691162462434218, -0.4527191902842129, 0.9038807416838726, 0.4881075422295056, 0.08922269500540736, -0.08932553240736985, 0.7339349199770622, 0.5800138228237042, 0.3105922500041376, -0.18345807250794244, -0.4931786917098754, -0.19566791278040502},
                {63.41990901885304, -11.34920710543738, -0.058510775041953345, -0.8454085943139913, 1.343349639995259, 0.3763367406876901, 0.8472569677600061, -0.057812137150536014, 0.332522278027068, -0.2345113822510858, -0.8427194901305244, -0.5840846856971149, 0.4704929804463287, 0.27030007442137505, 0.26858737267185573, -0.29166386462476224, -0.5339629689007106, 0.7868898720849795, -0.05440496045402221, -0.3242714130127881}
        };
        SoundMapEntry soundMapEntryD = new SoundMapEntry();
        ArrayList<MfccValue> mfccValuesD = soundMapEntryD.getValues();
        for (double[] temp : tempD) {
            mfccValuesD.add(new MfccValue(temp));
        }
        values.put("d", soundMapEntryD);




        double[][] tempV = {
                {61.57313259089662, -11.377432781866997, -0.09982525523401886, -1.3884395501945463, -0.20329321228404584, -1.759101970698552, -0.611726680304284, 0.0320920203298507, 0.4393874214701481, -0.16617250656714289, 0.38236524693973983, 0.30377988442261517, 0.7094521649645844, 0.5538212208136839, 0.5778644950071481, 0.35010027888996764, 0.381741459913407, 0.46891393214628496, 0.6462595626658143, 0.43597555695891643},
                {61.84569309992288, -11.785768364035572, -0.024560313143465073, -1.1638366320121833, 0.267057671401032, -0.7780508266220325, -0.5459027763819915, 0.029477774867295192, -0.05683872145452229, -0.7261362701841585, -0.4906693704293743, -0.9964359399731195, 0.10193065424184589, -0.28414759473605855, 0.32098351442351936, 0.9976685011336635, 0.3268520151195411, 0.5448114321959097, 0.8119439689824547, 0.3300592216911948},
                {62.94876219847656, -11.293234373098485, -0.2794964088654357, -2.249552333321039, -0.5663213606759285, 0.6741488492880325, 0.6244502642468008, -0.6367299485262423, -0.4579423084382186, 0.03107482947535667, -0.3949344096402716, -0.27836523251555034, 0.2619815495116482, 0.5242267767662936, 0.28246163107137123, 0.07270125302215158, -0.5295958614372063, -0.77421447239467, -0.4088439804317455, -0.5736158841991995}
        };
        SoundMapEntry soundMapEntryV = new SoundMapEntry();
        ArrayList<MfccValue> mfccValuesV = soundMapEntryV.getValues();
        for (double[] temp : tempV) {
            mfccValuesV.add(new MfccValue(temp));
        }
        values.put("v", soundMapEntryV);
    }

    private static final double MFCC_WEIGHTS[] = {0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0};

    private HashMap<String, SoundMapEntry> values = new HashMap<>(0);

    public HashMap<String, SoundMapEntry> getValues() {
        return values;
    }

    public void setValues(HashMap<String, SoundMapEntry> values) {
        this.values = values;
    }

    public String getValue(MfccValue mfccValue) {
        double minDistance = Double.MAX_VALUE;
        String soundValue = null;

        for (Map.Entry<String, SoundMapEntry> entry : values.entrySet()) {
            SoundMapEntry soundMapEntry = entry.getValue();
            for (MfccValue value : soundMapEntry.getValues()) {

                double distance;
                distance = MathCommon.euclidianDistanceWithWeight(value.getValue(), mfccValue.getValue(), MFCC_WEIGHTS);

                if (distance < minDistance) {
                    soundValue = entry.getKey();
                    minDistance = distance;
                }
            }
        }

        return soundValue;
    }
}
